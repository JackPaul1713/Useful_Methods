/*runCommand:String,runCommand:String[],speak:String,arrayToArraylist:String[],arrayToArraylist:int[],arrayToArraylist:Double[],arrayToArraylist:long[],arrayToArraylist:boolean[],openPhotos:,sigmoid:Double,rollDice:int,sigmoid:int,testMethod1:,speak:String+String+*/package useful_methods;import java.io.IOException;import java.util.ArrayList;public class MyMethods {public static void runCommand(String command) {			String[] bargs = new String[] {"/bin/bash", "-c", command, "with", "args"};			try {				Process proc = new ProcessBuilder(bargs).start();			} catch (IOException e) {				e.printStackTrace();			}		}public static void runCommand(String[] commands) {			for(String c: commands) {			String[] bargs = new String[] {"/bin/bash", "-c", c, "with", "args"};			try {				Process proc = new ProcessBuilder(bargs).start();			} catch (IOException e) {								e.printStackTrace();			}			}		}public static void speak(String s) {	MyMethods.runCommand("say " + s);}public static ArrayList<String> arrayToArraylist(String[] theArray) {	ArrayList<String> newb = new ArrayList<String>();	for(String sirp: theArray) {		newb.add(sirp);	}	return newb;}public static ArrayList<Integer> arrayToArraylist(int[] theArray) {	ArrayList<Integer> newb = new ArrayList<Integer>();	for(int sirp: theArray) {		newb.add(sirp);	}	return newb;}public static ArrayList<Double> arrayToArraylist(Double[] theArray) {	ArrayList<Double> newb = new ArrayList<Double>();	for(Double sirp: theArray) {		newb.add(sirp);	}	return newb;}public static ArrayList<Long> arrayToArraylist(long[] theArray) {	ArrayList<Long> newb = new ArrayList<Long>();	for(Long sirp: theArray) {		newb.add(sirp);	}	return newb;}public static ArrayList<Boolean> arrayToArraylist(boolean[] theArray) {	ArrayList<Boolean> newb = new ArrayList<Boolean>();	for(Boolean sirp: theArray) {		newb.add(sirp);	}	return newb;}public static void openPhotos() {	MyMethods.runCommand("open -a Photos");}public static double sigmoid(Double d) {			return (1/(1 + Math.pow(Math.E, -d)));		}public static int[] rollDice(int numberOfDice, int numberOfSides)		{		int counter = 0;		boolean rolling = true;		int theTotal = 0;		int results[] = new int[numberOfDice + 1];		for(int i = 0; i< numberOfDice; i ++)		{		int randomNumber = (int) ( (Math.random()) * numberOfSides) + 1;		results[counter] = randomNumber;		theTotal = theTotal + randomNumber;		}		return results;		}public static double sigmoid(int d) {			return (1/(1 + Math.pow(Math.E, -d)));		}public static void testMethod1() {	System.out.println("test was a suc");}public static void speak(String voice, String statement) {	MyMethods.runCommand("say -v " + voice + " " + statement);}}